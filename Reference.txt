SPA 
--
  * React JS (library)
  * VueJS (framework)
  * Angular 2+ (framework)
  * Svelte JS 

SPA Characteristics (7)
--
  1. Page should not refresh 
  2. URL should change 
  3. History should be maintained 
  4. Retain header and footer (don't load again ang again)
  5. Update the page contexually (update the section in between and footer )
  6. Active menu should be set 
  7. Page Title should also be changed

====



dev => qa => (bugs) => dev => qa => (bugs) => dev => qa => (bugs) => dev => qa => (QA Passed) => Deployment

Disadv
--
  * Manual efforts in Testing 
  * QA team has test cases with real requirements
  * dev team is not developing against the real requirements
  * time taken to complete dev is more 
  * big qa team is needed 
 
Automated Testing 
---
  0. Static-type checking (TypeScript, FlowJS, PropTypes )
  1. Unit Testing 
      * Testing small unit of a component 
      * individual units/components are tested 
      * bug reduction density =>  40-80% 

      Tools: Jest, React Testing Library, Jasmine JS, 

  2. Functional Testing / Integration Testing 
      * different unit, modules or components are tested as combined entity 
      * behaviour of the app would be tested 
      * to expose issues in the integration between integrated units 

      Tools: Jest &  React Testing Library vs Jest & Enzyme (jquery like tool -- for dom traversal)

  3. End 2 End Testing (E2E Testing)
      * Testing the whole app. 

      Tools: CypressJS, Selenium, Protractor

// Where to write Test case? 
// How to write test case? 
// How to test our app against the test cases we identified? 

Approach:
====
  TDD 
  ---
    Test Driven Development (TDD) is a programming practice that instructs developers 
    to write new code only if an automated test has failed.
    
    dev write the test cases => (instant feedback of failure) => developer should do code to fix the bug => (instant feedback of success) => [code complete] 

  
  BDD 
  ---
    Behavior-driven development (BDD) is an Agile software development methodology in which 
    an application is documented and designed around the behavior a user expects to 
    experience when interacting with it.
    
    dev write the test cases => (instant feedback of failure) => developer should do code to fix the bug => (instant feedback of success) => [code complete] 


=======

